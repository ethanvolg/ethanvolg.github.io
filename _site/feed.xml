<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-07-02T01:01:54+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">나의 코딩 공부</title><subtitle>ethan의 블로그</subtitle><author><name>ethan</name></author><entry><title type="html">XSS에 대응하는 방법</title><link href="http://localhost:4000/xss/XSS9/" rel="alternate" type="text/html" title="XSS에 대응하는 방법" /><published>2024-06-26T00:00:00+09:00</published><updated>2024-06-26T00:00:00+09:00</updated><id>http://localhost:4000/xss/XSS9</id><content type="html" xml:base="http://localhost:4000/xss/XSS9/"><![CDATA[<p><br /></p>

<h1 id="1-xss3"><span style="background:#000000; color:#ffffff">1. XSS(3)</span></h1>

<p><br /><span style="font-weight:bold; font-size:15px"> ※ 주의 사항 :</span></p>

<p><span style="font-weight:bold; font-size:15px">1. 교육 목적으로만 이용 해주세요.</span><br />
<span style="font-weight:bold; font-size:15px">2. 무단 침입, 데이터 유출, 개인 정보 침해 등 불법적인 활동은 심각한 법적 결과를 초래할 수 있습니다.</span><br />
<span style="font-weight:bold; font-size:15px">3.  개인적인 테스트 환경을 구축해서 실습하시길 바랍니다. </span></p>

<p><br /></p>

<h2 id="11-개요"><span style="background:#696969; color:#ffffff">1.1 개요 </span></h2>

<p><br /></p>

<p>이전에 XSS의 공격 기법 3 가지에 대해 알아보았다.  <code class="language-plaintext highlighter-rouge">Stored XSS</code>, <code class="language-plaintext highlighter-rouge">flected XSS</code>, <code class="language-plaintext highlighter-rouge">DOM Based XSS</code>  <br />
그렇다면 어떻게 이러한 공격을 막을 수 있을까. 스크립트를 작성할 수 없도록 차단하는 법, <br />
스크립트를 작성할 수 있지만 차단하는 법을 소개하겠다.<br /></p>

<h2 id="12-스크립트-작성-자체를-방지하기"><span style="background:#696969; color:#ffffff">1.2 스크립트 작성 자체를 방지하기 </span></h2>

<h3 id="121-필터링"><span style="font-weight:bold; font-size:22px;background-color:#7fffd4">1.2.1 필터링</span><br /></h3>

<p>필터링에는 2 가지의 필터링 방법이 있다. <code class="language-plaintext highlighter-rouge">블랙 리스트</code>, <code class="language-plaintext highlighter-rouge">화이트 리스트</code> 이다. <br />
<code class="language-plaintext highlighter-rouge">블랙 리스트</code>는  특정 단어나 패턴을 금지하는 방법이고,   <code class="language-plaintext highlighter-rouge">화이트 리스트</code>는 허용된 단어나 패턴만 사용할 수 있게 하는 방법이다.</p>

<p><code class="language-plaintext highlighter-rouge">화이트 리스트</code>는 스크립트 작성 자체를 방지하기 위해 사용되지는 않는다. <br />
이 방식은 매우 안전하고 강력한 보안을 제공하지만 사용자가 입력할 수 있는 범위가 제한되어 불편함을 느낄 수 있다. 특히, 다양한 입력이 필요한 애플리케이션에서는 적용하기 어렵다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// [화이트 리스트 예시, hi 와 hello 만 쓸 수 있도록 작성] //</span>

<span class="kd">function</span> <span class="nf">whitelist</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">hi</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">];</span>
    <span class="c1">//toLowercase: 모두 소문자로 바꾸기, includes: 포함된 글자가 있으면 true 없으면 false</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nf">toLowerCase</span><span class="p">()))</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">input</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="dl">''</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">userInput1</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hi</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">userInput2</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">userInput3</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hey</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">userInput4</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">HELLO</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">whitelist</span><span class="p">(</span><span class="nx">userInput1</span><span class="p">));</span> <span class="c1">// "hi"</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">whitelist</span><span class="p">(</span><span class="nx">userInput2</span><span class="p">));</span> <span class="c1">// "hello"</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">whitelist</span><span class="p">(</span><span class="nx">userInput3</span><span class="p">));</span> <span class="c1">// ""</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">whitelist</span><span class="p">(</span><span class="nx">userInput4</span><span class="p">));</span> <span class="c1">// "HELLO"</span>
</code></pre></div></div>

<p><br />그러한 이유로  <code class="language-plaintext highlighter-rouge">블랙 리스트</code> 필터링 방식을 많이 사용한다. 금지할 단어나 패턴을 미리 정의하고, 사용자가 정의한 내용을 입력하면 차단한다. 이러한 방식은 사용자에게 더 많은 입력의 자유를 제공하면서도 XSS 공격을 차단할 수 있는 장점이 있다.  그러나 새로운 공격 방법이 생겨날 때 마다 <code class="language-plaintext highlighter-rouge">블랙 리스트</code>를 지속적으로 업데이트를 해야 하고 우회 될 가능성이 있다는 단점이 존재한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// [블랙 리스트 예시, 우회하기] //</span>

<span class="cm">/* 1. Script를 차단 하는 경우 */</span>

<span class="c1">// 1.1 이용자의 입력칸 글자 수를 제한 하는 경우, 외부 스크립트를 가져오는 우회. </span>
		<span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span><span class="nx">글자</span> <span class="nx">수</span> <span class="nx">제한</span><span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span>		<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">scr</span><span class="o">=</span> <span class="dl">"</span><span class="s2">http://우회/js</span><span class="dl">"</span> <span class="o">&gt;&lt;</span><span class="sr">/script&gt;</span><span class="err"> 
</span>

<span class="c1">// 1.2 스크립트 글자 자체를 제한하는 경우 </span>
		<span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="o">&lt;&gt;</span>
    
    		<span class="c1">//대소문자 혼용//</span>
   	 	<span class="o">&lt;</span><span class="nx">ScRipT</span><span class="o">&gt;&lt;</span><span class="sr">/ScrIpt</span><span class="err">&gt;
</span>
		<span class="c1">//분할 작성//</span>
		<span class="o">&lt;</span><span class="nx">scrscriptipt</span><span class="o">&gt;&lt;</span><span class="sr">/scrscriptipt</span><span class="err">&gt;
</span>    
<span class="c1">// 1.3 대소문자를 포함해서 여러 문자를 다른 문자로 바꿔서 제한한 경우</span>
    		<span class="o">&lt;</span><span class="nx">xript</span><span class="o">&gt;&lt;</span><span class="sr">/xript</span><span class="err">&gt;
</span><span class="c1">//scr에 파일이 없으면 404에러 나타나는 것을 이용, onerror onload onclick...와 같은 이벤트 핸들러를 차단할 것// </span>
		<span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="nx">우회</span> <span class="nx">onerror</span><span class="o">=</span><span class="dl">'</span><span class="s1">alert(1)</span><span class="dl">'</span><span class="o">&gt;</span> 
    
            
            
<span class="cm">/* 2.그외 태그에서 */</span>
        
<span class="c1">// href 주소창의 역할을 이용한 우회, javascript: alert(1)를 작성 가능하다. 차단할 것.</span>
        <span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="dl">"</span><span class="s2">javascript:alert(1)</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/a</span><span class="err">&gt;
</span>
<span class="c1">// input 이벤트 핸들러를 이용한 우회, value에 꺽쇠를 차단 했을 경우에 이벤트 핸들러도 같이 차단할 것.</span>
	<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">onmouseover</span><span class="o">=</span><span class="dl">"</span><span class="s2">alert(1)</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">onfocus</span><span class="o">=</span><span class="dl">"</span><span class="s2">alert(1)</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="nx">autofocus</span> <span class="nx">onfocus</span><span class="o">=</span><span class="dl">"</span><span class="s2">alert(1)</span><span class="dl">"</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>위의 우회 또한 일부이며, 우회할 수 있는 방법은 무수히 많이 존재한다. <code class="language-plaintext highlighter-rouge">블랙 리스트</code>는 모든 공격을 완벽히 막을 수 없다는 한계를 가지고 있기 때문에 이후에 ‘스크립트를 작성할 수 있지만 실행 차단하는 방법’ 에 대해 알아볼 것이다.</p>

<p><br /></p>

<h2 id="13-스크립트를-작성할-수-있지만-실행을-차단하기"><span style="background:#696969; color:#ffffff">1.3 스크립트를 작성할 수 있지만 실행을 차단하기 </span></h2>

<p><br /></p>

<h3 id="131-html-entity"><span style="font-weight:bold; font-size:22px;background-color:#7fffd4">1.3.1 HTML Entity </span></h3>

<p>XSS 방지하는 데 확실하고 필수적인 방법이다. 이는 HTML에서 특수 문자를 치환하는 방식으로, 필터링과는 다르다. 필터링이 특정 문자의 사용을 금지하는 것이라면, HTML 엔티티는 사용자가 특수 문자를 자유롭게 입력하고 그 문자를 안전하게 표시할 수 있게 한다. 예를 들어, 다음과 같이 표시한다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">결과</th>
      <th style="text-align: center">설명</th>
      <th style="text-align: center">이름 </th>
      <th style="text-align: center">숫자 </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"> </td>
      <td style="text-align: center">공백</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;nbsp;</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;#160;</code></td>
    </tr>
    <tr>
      <td style="text-align: center">&lt;</td>
      <td style="text-align: center">보다 작은</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;lt;</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;#60;</code></td>
    </tr>
    <tr>
      <td style="text-align: center">&gt;</td>
      <td style="text-align: center">보다 큰</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;gt;</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;#62;</code></td>
    </tr>
    <tr>
      <td style="text-align: center">&amp;</td>
      <td style="text-align: center">앰퍼샌드</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;amp;</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;#38;</code></td>
    </tr>
    <tr>
      <td style="text-align: center">”</td>
      <td style="text-align: center">큰 따옴표</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;quot;</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;#34;</code></td>
    </tr>
    <tr>
      <td style="text-align: center">’</td>
      <td style="text-align: center">작은 따옴표</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;apos;</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">&amp;#39;</code></td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/images/2024-06-26-XSS9/image-20240630032336205.png" alt="image-20240630032336205" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[그림 1-1]</td>
    </tr>
  </tbody>
</table>

<p><span style="font-weight:bold; font-size:19px;background-color:#fafad2">⚠ <code class="language-plaintext highlighter-rouge">HTML Editor</code>를 사용하는 웹페이지의 경우⚠</span></p>

<p>간혹 웹페이지 중에 이용자가 직접 HTML을 이용해서 작성할 수 있도록 만든 사이트를 볼 수 있다. 이때는 <code class="language-plaintext highlighter-rouge">HTML Entity</code>를 적용할 수 없어서 보안 측면에서 매우 위험하다. <code class="language-plaintext highlighter-rouge">HTML Editor</code> 기능을 삭제하도록 권고하지만 만약 사용해야 한다면 다음과 같은 절차를 따라야 한다.</p>

<ol>
  <li>파라미터를 보내는 HTML 특수 문자들은 전부 <code class="language-plaintext highlighter-rouge">HTML Entity</code>로 치환한다.</li>
  <li>꼭 필요한 기능을 선별하고 그 중 허용할 <code class="language-plaintext highlighter-rouge">Tag</code>를 정한다. 그리고 그 <code class="language-plaintext highlighter-rouge">Tag</code>를 <code class="language-plaintext highlighter-rouge">화이트 리스트</code> 필터링을 통해 다시 기능을 살린다.</li>
  <li>살린 <code class="language-plaintext highlighter-rouge">Tag</code>내에 악의적인<code class="language-plaintext highlighter-rouge"> Event Handler</code>를 <code class="language-plaintext highlighter-rouge">블랙 리스트</code> 필터링로 제한한다.<br /></li>
</ol>

<h3 id="132-content-security-policycsp-설정-"><span style="font-weight:bold; font-size:22px;background-color:#7fffd4">1.3.2 Content Security Policy(CSP) 설정 </span><br /></h3>

<p>스크립트, 스타일, 이미지 등 허용된 리소스만 사용하도록 설정하여 제한한다.  다양한 설정 방식이 존재하지만 중요한 설정을 위주로 소개하도록 하겠다.</p>

<p>＊<span style="font-weight:bold; font-size:20px"><code class="language-plaintext highlighter-rouge">default-src 'self'</code> :</span>  모든 외부 리소스 유형(스크립트, 스타일시트, 이미지 등)를 제한한다.<br />
＊<span style="font-weight:bold; font-size:20px"><code class="language-plaintext highlighter-rouge">script-src 'self'</code> : </span> 외부 스크립트를 차단하며, <code class="language-plaintext highlighter-rouge">default-src 'self'</code>의 범주 안에 포함되지만, 추가적인 정책을 사용하려면 별도로 작성해야 한다.</p>

<p>앞선 정책들은 외부 스크립트를 제한한다. 하지만 Reflected xss를 시도하는 경우는 외부 스크립트가 아닌 내부 스크립트에 의해 파라미터의 내용이 페이지에 나타나는 것을 이용하므로 인라인 스크립트를 삽입을 방지해야 한다.</p>

<p><br /></p>

<p><span style="font-weight:bold; font-size:18px;background-color:#f0ffff">▶추가 정책 : Reflected XSS의 인라인 스크립트를 방지 </span></p>

<p>＊<span style="font-weight:bold; font-size:20px"><code class="language-plaintext highlighter-rouge">nonce</code> : </span> 시시각각 웹페이지가 변하는 동작을 구사할 때 이용되며, 서버가 매 요청마다 새롭게 <code class="language-plaintext highlighter-rouge">nonce</code>값을 생성하여 csp에 포함한다.  다른 <code class="language-plaintext highlighter-rouge">nonce</code>값을 적은 스크립트를 작성하면 제한한다.</p>

<p>=&gt; <code class="language-plaintext highlighter-rouge">nonce</code> 값을 개발자 도구(페이지소스)에서 설정을 보고 그대로 넣어 스크립트를 작성할 수 있지 않느냐고 반문할 수 도 있다.  이를 방지하기 위해 <code class="language-plaintext highlighter-rouge">nonce</code> 값을 세션에 저장하고, 서버가 요청마다 검증할 수 있다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 간단 예시 (세션 저장 포함x)

<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"Content-Security-Policy"</span> <span class="na">content=</span><span class="s">"default-src 'self'; script-src 'self' 'nonce-1234'"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;script </span><span class="na">nonce=</span><span class="s">"1234"</span><span class="nt">&gt;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hi</span><span class="dl">'</span><span class="p">);</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>	
</code></pre></div></div>

<p>＊<span style="font-weight:bold; font-size:20px"><code class="language-plaintext highlighter-rouge">hash</code> :</span> 스크립트 내용이 변경되지 않는 경우에 유용하며, 특정 스크립트 내용의 해시를 미리 정의하여 해당 스크립트만 실행되도록 한다. 다른 스크립트 내용을 적는다면 제한한다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 간단 예시

<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"Content-Security-Policy"</span> <span class="na">content=</span><span class="s">"default-src 'self'; script-src 'self' 'sha256-V7Q9/DwmqvdPGQ4dy6ncNMsD52hvmuqtLSJ0fK6Mdr8='"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;script&gt;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">hi</span><span class="dl">'</span><span class="p">);</span> <span class="c1">// 이 값이 위의 설정된 sha256으로 해시처리하고, base64로 인코딩한 값	</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>	
</code></pre></div></div>

<h3 id="133-httponly-및-secure-속성-설정-"><span style="font-weight:bold; font-size:22px;background-color:#7fffd4">1.3.3 HttpOnly 및 Secure 속성 설정 </span></h3>

<p>둘 다 모두 쿠키의 보안을 강화하기 위해 설정한다. 좀 더 정확하게 설명하면 <code class="language-plaintext highlighter-rouge">HttpOnly</code>는 클라이언트 측 스크립트가 쿠키에 접근할 수 없게 제한하는 설정이고<br />
<code class="language-plaintext highlighter-rouge">Secure</code>은 쿠키가 HTTPS 의 연결을 통해서 만 전송되도록 하는 설정이다. 그리고 다음과 같이 설정한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">res</span><span class="p">.</span><span class="nf">cookie</span><span class="p">(</span><span class="dl">'</span><span class="s1">sessionId</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">1234</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">secure</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="14-결론"><span style="background:#696969; color:#ffffff">1.4 결론</span></h2>

<p><br /></p>

<p><span style="font-weight:bold; font-size:17px">1. 필수적으로 모든 HTML 특수 문자를 <code class="language-plaintext highlighter-rouge">HTML Entity</code>로 변환하여 출력한다.</span></p>

<p><span style="font-weight:bold; font-size:17px">2.<code class="language-plaintext highlighter-rouge">CSP</code>설정을 통해 허용된 리소스만 삽입할 수 있도록 한다.</span></p>

<p><span style="font-weight:bold; font-size:17px">3. <code class="language-plaintext highlighter-rouge">Httponly</code> , <code class="language-plaintext highlighter-rouge">Secure</code> 설정을 함으로서 클라이언트 측 쿠키를 보호한다.</span></p>

<p><span style="font-weight:bold; font-size:17px">4. 필요에 따라 <code class="language-plaintext highlighter-rouge">블랙 리스트</code> 필터링을 적용해서 추가적인 보안을 적용한다.</span></p>]]></content><author><name>ethan</name></author><category term="XSS" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">XSS 이란(2)?</title><link href="http://localhost:4000/xss/XSS8/" rel="alternate" type="text/html" title="XSS 이란(2)?" /><published>2024-06-21T00:00:00+09:00</published><updated>2024-06-21T00:00:00+09:00</updated><id>http://localhost:4000/xss/XSS8</id><content type="html" xml:base="http://localhost:4000/xss/XSS8/"><![CDATA[<p><br /></p>

<h1 id="1-xss2"><span style="background:#000000; color:#ffffff">1. XSS(2)</span></h1>

<p><br /><span style="font-weight:bold; font-size:15px"> ※ 주의 사항 :</span></p>

<p><span style="font-weight:bold; font-size:15px">1. 교육 목적으로만 이용 해주세요.</span><br />
<span style="font-weight:bold; font-size:15px">2. 무단 침입, 데이터 유출, 개인 정보 침해 등 불법적인 활동은 심각한 법적 결과를 초래할 수 있습니다.</span><br />
<span style="font-weight:bold; font-size:15px">3.  개인적인 테스트 환경을 구축해서 실습하시길 바랍니다. </span></p>

<p><br /></p>

<h2 id="11-개요"><span style="background:#696969; color:#ffffff">1.1 개요 </span></h2>

<p><br /></p>

<p><span style="font-weight:bold; font-size:20px;background-color:#7fffd4">✔XSS 간단 요약</span></p>

<p><span style="font-weight:bold; font-size:20px">xss :</span> <span style="text-decoration: red wavy underline;text-decoration-thickness: 1.8px;">클라이언트 측 브라우저에 발생하는 코드</span>를 조작 및 변경하여, 악성 스크립트를 실행시키고 정보를 탈취하는 공격 기법이다.<br />
XSS 공격은 일반적으로 세 가지 유형으로 나뉜다 : <code class="language-plaintext highlighter-rouge">Stored XSS</code>, <code class="language-plaintext highlighter-rouge">Reflected XSS</code>, <code class="language-plaintext highlighter-rouge">DOM-based XSS</code>.</p>

<blockquote>
  <p><span style="font-weight:bold; font-size:20px">Stored XSS :</span> 서버에 임의의 스크립트를 삽입하여, 그 스크립트가 담긴 페이지를 생성한다. 이후 이  페이지에 접근하는 모든 클라이언트의 정보를 가져오는 방법이다.</p>

  <p><span style="font-weight:bold; font-size:20px">Reflected XSS :</span> URL의 파라미터에 임의의 스크립트를 삽입하여, 그 링크를 클릭한 클라이언트가 그 스크립트를 실행할 수 있도록 하는 방법이다. 일반적으로 파라미터 값이 HTTP 응답에 그대로 출력 된다.</p>
</blockquote>

<p><br /></p>

<h2 id="12-dom-based-xss"><span style="background:#696969; color:#ffffff">1.2 DOM Based XSS </span></h2>

<p><br /></p>

<p><span style="font-weight:bold; font-size:20px;background-color:#7fffd4"><span style="font-weight:bold; font-size:20px">DOM의 개념</span></span></p>

<p>DOM(document object model) 는 웹 페이지를 <span style="border: 3px solid pink;border-radius: 50%;">동적</span>으로 <span style=";box-shadow:inset 0 -6px 0 pink;line-height:21px;">조작하고 변경</span>할 수 있는 기술이다.</p>

<p>이를 통해 JavaScript와 같은 프로그래밍 언어로 HTML 요소를 동적으로 변경할 수 있다.<br />
웹 페이지에서 보여지는 시각적인 이미지는 모두 정적이고, HTML 요소로 이루어져 있다.</p>

<p>DOM은 클릭했을 때 임의의 동작을 하게 만들고, 검색 창에 텍스트를 작성했을 때 목록이 나타나는 등<br />
많은 요소들이 동작할 수 있도록 도와준다.</p>

<p><br /></p>

<p><span style="font-weight:bold; font-size:20px;background-color:#7fffd4">DOM Based XSS 의 개념 및 원리</span></p>

<p>DOM Based XSS 는 웹페이지의 DOM을 이용하여 스크립트를 조작할 수 있게 하는 공격 기법이다. <br />
예를 들어, 이용자가 검색 창에 텍스트를 입력하면 검색한 글이 페이지 화면에 출력이 된다고 가정해 보자.<br />
이러한 경우, 악의적인 사용자는 검색어에 임의의 스크립트를 삽입하여 클라이언트에게 영향을 미칠 수 있다.</p>

<p>▶<span style="font-weight:bold; font-size:17px;background-color:#f0ffff">Reflected XSS와 같은 점</span></p>

<p>URL의 <span style=";box-shadow:inset 0 -6px 0 pink;line-height:21px;">파라미터에 임의의 스크립트를 삽입하여</span>, 그 링크를 클릭한 클라이언트가 그 스크립트를 실행할 수 있도록 하는 방법이다.</p>

<p>▶<span style="font-weight:bold; font-size:17px;background-color:#f0ffff">Reflected XSS와 다른 점</span></p>

<p>DOM Based XSS는 파라미터가 <span style=";box-shadow:inset 0 -6px 0 pink;line-height:21px;">HTTP 응답에 그대로 출력 되는 것이 아니다.</span>  대신, 클라이언트 측에서 동적으로 스크립트에 의해 페	이지에 작성되는 것이다.</p>

<p><br /></p>

<p>▶ <span style="font-weight:bold; font-size:17px;background-color:#f0ffff">DOM Based XSS 찾기</span></p>

<p>즉, DOM Based XSS 는 특정 동작에 출력하므로 발견하기 어려울 수 있다.<br />
하지만 분명한 것은 XSS 공격이 발생하려면 스크립트가 삽입되어야만 할 수 있다는 사실이다.<br />
이를 통해 공격자들은 <span style=";box-shadow:inset 0 -6px 0 pink;line-height:21px;">주로  <code class="language-plaintext highlighter-rouge">document.write</code> 나 <code class="language-plaintext highlighter-rouge">innerHTML</code> 등의 메서드</span>를 이용한다. 따라서 이러한 메서드를 이용하는 코드를 주의 깊게 점검하면 취약한 코드를 발견할 수 있다.</p>]]></content><author><name>ethan</name></author><category term="XSS" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">모의해킹 보고서 작성법</title><link href="http://localhost:4000/report/report/" rel="alternate" type="text/html" title="모의해킹 보고서 작성법" /><published>2024-06-21T00:00:00+09:00</published><updated>2024-06-21T00:00:00+09:00</updated><id>http://localhost:4000/report/report</id><content type="html" xml:base="http://localhost:4000/report/report/"><![CDATA[<p><br /></p>

<h1 id="1-모의-해킹-보고서-작성법"><span style="background:#000000; color:#ffffff">1. 모의 해킹 보고서 작성법</span></h1>

<p><br /></p>

<h2 id="11-개요"><span style="background:#696969; color:#ffffff">1.1 개요 </span></h2>

<p><br /></p>

<blockquote>
  <p><span style="font-weight:bold; font-size:18px;background-color:#f0ffff">Microsoft word를 사용하는 이유</span></p>
</blockquote>

<p>보고서는 한글 프로그램 보다 Microsoft word를 이용하는 게 좋다.  한글 프로그램은 한글만 이용, 정부와 같이 문서 보안이 중요할 때는 사용하겠지만, Microsoft word가 파일 간 호환성이 더 뛰어나고, 다양한 기능과 언어를 지원하기 때문에 업무상 더 적합하다.</p>

<blockquote>
  <p><span style="font-weight:bold; font-size:18px;background-color:#f0ffff">보고서를 이쁘게 작성해야 하는 이유</span></p>
</blockquote>

<p>모의 해킹의 주된 목적은 보안 정도를 평가하고 관계자들에게 해당 보안 취약점을 인식시켜 필요한 조치를 취할 수 있도록 돕는 것이다. <br />
그렇기 때문에 보고서의 전달력이 매우 중요하다.  대부분 관계자들은 비전공자이기 때문에 충분히 이해하기 쉽도록 상세히 작성해야 한다. <br />
보고서가 길어짐에 따라 오랫동안  보기 편해야  하는 것이 당연하다.  따라서 이쁘게 쓴 보고서는  업무 능력을 좌우하므로 중요하다.</p>

<p><br /></p>

<h2 id="12-표와-그림"><span style="background:#696969; color:#ffffff">1.2 표와 그림 </span></h2>

<p><br /></p>

<p>✅ <span style="font-weight:bold; font-size:18px">보기 좋은 표와 그림 형태</span></p>

<ol>
  <li>표와 그림 가로 크기 각각 동일하게 맞추기.</li>
  <li>그림 테두리 적용해서 경계선 보이게 하기.</li>
  <li>그림 안에 있는 글자와 본문에 있는 글자의 크기가 비슷하게 될 수 있도록 크기 맞추기.</li>
  <li>공격 과정을 담기 위해 페이지 전체를 캡처해서 사용하기. (필요하다면, 크게 강조할 부분은 자르고 사용)</li>
  <li>그림 되도록 많이 첨부해서 자세히 설명하기.</li>
</ol>

<p><br /></p>

<h2 id="13-글"><span style="background:#696969; color:#ffffff">1.3 글 </span></h2>

<p><br /></p>

<p>✅ <span style="font-weight:bold; font-size:18px">전달력 좋은 글</span></p>

<ol>
  <li>
    <p>말투는 상관 없지만 동일한 어투 사용하기.</p>
  </li>
  <li>
    <p>그림과 해당 글의 간격을 좁혀서 설명하기.</p>
  </li>
  <li>
    <p>사용된 해킹 공격에 대한 간단하게 설명하기.</p>
  </li>
  <li>
    <p>발견된 취약점의 위치(url or 경로) 명시하기.</p>
  </li>
  <li>
    <p>결과를 작성할 때 그림에 담긴 결과를 그대로 설명하기 보다는 해킹 피해자 측 발생할 수 있는 피해 경로와 같이 설명하기.</p>

    <p>예) alert(1) 발생! (X) ▶ 스크립트가 삽입된 게시글에 접근 시 의도한 임의의 스크립트가 실행되어, 클라이언트의 정보가 탈취 될 가능성이 있음</p>
  </li>
</ol>

<p><br /></p>]]></content><author><name>ethan</name></author><category term="Report" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">XSS 취약점 찾기(6)</title><link href="http://localhost:4000/xss/XSS7/" rel="alternate" type="text/html" title="XSS 취약점 찾기(6)" /><published>2024-06-18T00:00:00+09:00</published><updated>2024-06-18T00:00:00+09:00</updated><id>http://localhost:4000/xss/XSS7</id><content type="html" xml:base="http://localhost:4000/xss/XSS7/"><![CDATA[<p><br /></p>

<h1 id="1-xss-취약점-찾기6"><span style="background:#000000; color:#ffffff">1. XSS 취약점 찾기(6)</span></h1>

<p><br /><span style="font-weight:bold; font-size:15px"> ※ 주의 사항 :</span></p>

<p><span style="font-weight:bold; font-size:15px">1. 교육 목적으로만 이용 해주세요.</span><br />
<span style="font-weight:bold; font-size:15px">2. 무단 침입, 데이터 유출, 개인 정보 침해 등 불법적인 활동은 심각한 법적 결과를 초래할 수 있습니다.</span><br />
<span style="font-weight:bold; font-size:15px">3.  개인적인 테스트 환경을 구축해서 실습하시길 바랍니다. </span></p>

<p><br /></p>

<h2 id="11-xss-6-문제-"><span style="background:#696969; color:#ffffff">1.1 XSS 6 문제 </span></h2>

<p><br /></p>

<p><img src="/images/2024-06-18-XSS7/image-20240618023836967.png" alt="image-20240618023836967" style="zoom:50%;" /></p>]]></content><author><name>ethan</name></author><category term="XSS" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">XSS 취약점 찾기(5)</title><link href="http://localhost:4000/xss/XSS6/" rel="alternate" type="text/html" title="XSS 취약점 찾기(5)" /><published>2024-06-18T00:00:00+09:00</published><updated>2024-06-18T00:00:00+09:00</updated><id>http://localhost:4000/xss/XSS6</id><content type="html" xml:base="http://localhost:4000/xss/XSS6/"><![CDATA[<p><br /></p>

<h1 id="1-xss-취약점-찾기5"><span style="background:#000000; color:#ffffff">1. XSS 취약점 찾기(5)</span></h1>

<p><br /><span style="font-weight:bold; font-size:15px"> ※ 주의 사항 :</span></p>

<p><span style="font-weight:bold; font-size:15px">1. 교육 목적으로만 이용 해주세요.</span><br />
<span style="font-weight:bold; font-size:15px">2. 무단 침입, 데이터 유출, 개인 정보 침해 등 불법적인 활동은 심각한 법적 결과를 초래할 수 있습니다.</span><br />
<span style="font-weight:bold; font-size:15px">3.  개인적인 테스트 환경을 구축해서 실습하시길 바랍니다. </span></p>

<p><br /></p>

<h2 id="11-xss-5-문제-"><span style="background:#696969; color:#ffffff">1.1 XSS 5 문제 </span></h2>

<p><br /></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/images/2024-06-18-XSS6/image-20240618023008146.png" alt="image-20240618023008146" style="zoom: 67%;" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[그림 1-1]</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: center"><img src="/images/2024-06-18-XSS6/image-20240618023047258.png" alt="image-20240618023047258" style="zoom:60%;" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">[그림 1-2]</td>
    </tr>
  </tbody>
</table>

<p><img src="/images/2024-06-18-XSS6/image-20240618023113434.png" alt="image-20240618023113434" style="zoom:80%;" /></p>

<p><img src="/images/2024-06-18-XSS6/image-20240618023142818.png" alt="image-20240618023142818" style="zoom:60%;" /></p>

<p><img src="/images/2024-06-18-XSS6/image-20240618023219265.png" alt="image-20240618023219265" style="zoom:80%;" /></p>

<p><img src="/images/2024-06-18-XSS6/image-20240618023512982.png" alt="image-20240618023512982" style="zoom:60%;" /></p>

<p><img src="/images/2024-06-18-XSS6/image-20240618023553647.png" alt="image-20240618023553647" style="zoom:80%;" /></p>

<p><img src="/images/2024-06-18-XSS6/image-20240618023615557.png" alt="image-20240618023615557" style="zoom:60%;" /></p>

<p><img src="/images/2024-06-18-XSS6/image-20240618023709797.png" alt="image-20240618023709797" style="zoom: 80%;" /></p>

<p><img src="/images/2024-06-18-XSS6/image-20240618023637074.png" alt="image-20240618023637074" style="zoom:50%;" /></p>]]></content><author><name>ethan</name></author><category term="XSS" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">XSS 취약점 찾기(4)</title><link href="http://localhost:4000/xss/XSS5/" rel="alternate" type="text/html" title="XSS 취약점 찾기(4)" /><published>2024-06-18T00:00:00+09:00</published><updated>2024-06-18T00:00:00+09:00</updated><id>http://localhost:4000/xss/XSS5</id><content type="html" xml:base="http://localhost:4000/xss/XSS5/"><![CDATA[<p><br /></p>

<h1 id="1-xss-취약점-찾기4"><span style="background:#000000; color:#ffffff">1. XSS 취약점 찾기(4)</span></h1>

<p><br /><span style="font-weight:bold; font-size:15px"> ※ 주의 사항 :</span></p>

<p><span style="font-weight:bold; font-size:15px">1. 교육 목적으로만 이용 해주세요.</span><br />
<span style="font-weight:bold; font-size:15px">2. 무단 침입, 데이터 유출, 개인 정보 침해 등 불법적인 활동은 심각한 법적 결과를 초래할 수 있습니다.</span><br />
<span style="font-weight:bold; font-size:15px">3.  개인적인 테스트 환경을 구축해서 실습하시길 바랍니다. </span></p>

<p><br /></p>

<h2 id="11-xss-4-문제-"><span style="background:#696969; color:#ffffff">1.1 XSS 4 문제 </span></h2>

<p><br /></p>

<p><img src="/images/2024-06-18-XSS5/image-20240618021814044.png" alt="image-20240618021814044" style="zoom: 67%;" /></p>

<p><img src="/images/2024-06-18-XSS5/image-20240618021724196.png" alt="image-20240618021724196" style="zoom:60%;" /><img src="/images/2024-06-18-XSS5/image-20240618021900140.png" alt="image-20240618021900140" style="zoom:80%;" /></p>

<p><img src="/images/2024-06-18-XSS5/image-20240618021947289.png" alt="image-20240618021947289" style="zoom:60%;" /></p>

<p><img src="/images/2024-06-18-XSS5/image-20240618022023224.png" alt="image-20240618022023224" style="zoom:80%;" /></p>

<p><img src="/images/2024-06-18-XSS5/image-20240618022101547.png" alt="image-20240618022101547" style="zoom:60%;" /></p>

<p><img src="/images/2024-06-18-XSS5/image-20240618022139454.png" alt="image-20240618022139454" style="zoom:80%;" /></p>

<p><img src="/images/2024-06-18-XSS5/image-20240618022822760.png" alt="image-20240618022822760" style="zoom:60%;" /></p>

<p>![(/images/2024-06-18-XSS5/image-20240618022256780.png)</p>

<p><img src="/images/2024-06-18-XSS5/image-20240618022740308.png" alt="image-20240618022740308" style="zoom:60%;" /></p>

<p><img src="/images/2024-06-18-XSS5/image-20240618022927569.png" alt="image-20240618022927569" style="zoom:60%;" /></p>

<p><img src="/images/2024-06-18-XSS5/image-20240618023805877.png" alt="image-20240618023805877" style="zoom:80%;" /></p>

<p><img src="/images/2024-06-18-XSS5/image-20240618022859233.png" alt="image-20240618022859233" style="zoom:50%;" /></p>]]></content><author><name>ethan</name></author><category term="XSS" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">XSS 취약점 찾기(3)</title><link href="http://localhost:4000/xss/XSS4/" rel="alternate" type="text/html" title="XSS 취약점 찾기(3)" /><published>2024-06-18T00:00:00+09:00</published><updated>2024-06-18T00:00:00+09:00</updated><id>http://localhost:4000/xss/XSS4</id><content type="html" xml:base="http://localhost:4000/xss/XSS4/"><![CDATA[<p><br /></p>

<h1 id="1-xss-취약점-찾기3"><span style="background:#000000; color:#ffffff">1. XSS 취약점 찾기(3)</span></h1>

<p><br /><span style="font-weight:bold; font-size:15px"> ※ 주의 사항 :</span></p>

<p><span style="font-weight:bold; font-size:15px">1. 교육 목적으로만 이용 해주세요.</span><br />
<span style="font-weight:bold; font-size:15px">2. 무단 침입, 데이터 유출, 개인 정보 침해 등 불법적인 활동은 심각한 법적 결과를 초래할 수 있습니다.</span><br />
<span style="font-weight:bold; font-size:15px">3.  개인적인 테스트 환경을 구축해서 실습하시길 바랍니다. </span></p>

<p><br /></p>

<h2 id="11-xss-3-문제-"><span style="background:#696969; color:#ffffff">1.1 XSS 3 문제 </span></h2>

<p><br /></p>

<p><img src="/images/2024-06-18-XSS4/image-20240618021749560.png" alt="image-20240618021749560" style="zoom: 67%;" /></p>

<p><img src="/images/2024-06-18-XSS4/image-20240618021241202.png" alt="image-20240618021241202" style="zoom: 67%;" /></p>

<p>이번에는 마이페이지에서 확인하려고 한다.</p>

<p><img src="/images/2024-06-18-XSS4/image-20240618021308976.png" alt="image-20240618021308976" style="zoom:60%;" /></p>

<p>GET 메서드로 파라미터가 1234 인데, 해당 화면에 1234가 출력 된다.</p>

<p><img src="/images/2024-06-18-XSS4/image-20240618021346395.png" alt="image-20240618021346395" style="zoom:60%;" /></p>

<p>재차 확인하기 위해 0000 으로 파라미터를 바꾸니, 응답 화면에도 잘 출력 되는 것을 확인 할 수 있다.<br />
따라서 reflected XSS를 시도해 볼 수 있다.</p>

<p><img src="/images/2024-06-18-XSS4/image-20240618021437982.png" alt="image-20240618021437982" style="zoom:60%;" /></p>

<p>또한, 특수문자를 체크해보니 응답 화면에 잘 나타났다.</p>

<p><img src="/images/2024-06-18-XSS4/image-20240618021537676.png" alt="image-20240618021537676" style="zoom:60%;" /></p>

<p><img src="/images/2024-06-18-XSS4/image-20240618021619251.png" alt="image-20240618021619251" style="zoom:50%;" /></p>

<p>역시 스크립트를 작성을 하니, 해당 링크를 들어가면 다음과 같이 화면에 나타났다.</p>]]></content><author><name>ethan</name></author><category term="XSS" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">XSS 취약점 찾기(2)</title><link href="http://localhost:4000/xss/XSS3/" rel="alternate" type="text/html" title="XSS 취약점 찾기(2)" /><published>2024-06-18T00:00:00+09:00</published><updated>2024-06-18T00:00:00+09:00</updated><id>http://localhost:4000/xss/XSS3</id><content type="html" xml:base="http://localhost:4000/xss/XSS3/"><![CDATA[<p><br /></p>

<h1 id="1-xss-취약점-찾기2"><span style="background:#000000; color:#ffffff">1. XSS 취약점 찾기(2)</span></h1>

<p><br /><span style="font-weight:bold; font-size:15px"> ※ 주의 사항 :</span></p>

<p><span style="font-weight:bold; font-size:15px">1. 교육 목적으로만 이용 해주세요.</span><br />
<span style="font-weight:bold; font-size:15px">2. 무단 침입, 데이터 유출, 개인 정보 침해 등 불법적인 활동은 심각한 법적 결과를 초래할 수 있습니다.</span><br />
<span style="font-weight:bold; font-size:15px">3.  개인적인 테스트 환경을 구축해서 실습하시길 바랍니다. </span></p>

<p><br /></p>

<h2 id="11-xss-2-문제-"><span style="background:#696969; color:#ffffff">1.1 XSS 2 문제 </span></h2>

<p><br /></p>]]></content><author><name>ethan</name></author><category term="XSS" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">XSS 취약점 찾기(1)</title><link href="http://localhost:4000/xss/XSS2/" rel="alternate" type="text/html" title="XSS 취약점 찾기(1)" /><published>2024-06-18T00:00:00+09:00</published><updated>2024-06-18T00:00:00+09:00</updated><id>http://localhost:4000/xss/XSS2</id><content type="html" xml:base="http://localhost:4000/xss/XSS2/"><![CDATA[<p><br /></p>

<h1 id="1-xss-취약점-찾기1"><span style="background:#000000; color:#ffffff">1. XSS 취약점 찾기(1)</span></h1>

<p><br /><span style="font-weight:bold; font-size:15px"> ※ 주의 사항 :</span></p>

<p><span style="font-weight:bold; font-size:15px">1. 교육 목적으로만 이용 해주세요.</span><br />
<span style="font-weight:bold; font-size:15px">2. 무단 침입, 데이터 유출, 개인 정보 침해 등 불법적인 활동은 심각한 법적 결과를 초래할 수 있습니다.</span><br />
<span style="font-weight:bold; font-size:15px">3.  개인적인 테스트 환경을 구축해서 실습하시길 바랍니다. </span></p>

<p><br /></p>

<h2 id="11-xss-1-문제-"><span style="background:#696969; color:#ffffff">1.1 XSS 1 문제 </span></h2>

<p><br /></p>

<p><img src="C:\Users\ljj01\OneDrive\바탕 화면\프로그램\ethanvolg.github.io\images\Untitled\image-20240618015745282.png" alt="image-20240618015745282" style="zoom:67%;" /></p>

<p>게시판에 먼저 들어가서 글을 작성하여 어떻게 나타나는지 확인 하였다.</p>

<p><img src="/images/2024-06-18-XSS2/image-20240618020616108.png" alt="image-20240618020616108" style="zoom:60%;" /></p>

<p><img src="/images/2024-06-18-XSS2/image-20240618020310214.png" alt="image-20240618020310214" style="zoom:80%;" /></p>

<p>제목, 본문 내용이 적은 대로 잘 작성되는지 확인이 가능했다.<br />
따라서 stored xss 를 시도해 볼만 하다.</p>

<p><img src="/images/2024-06-18-XSS2/image-20240618020654991.png" alt="image-20240618020654991" style="zoom:60%;" /></p>

<p><img src="/images/2024-06-18-XSS2/image-20240618020439799.png" alt="image-20240618020439799" style="zoom:80%;" /></p>

<p>사용 가능한 특수 문자를 체크 하기 위해 위와 같이 작성하였고, 본문이 아닌 제목에서는 잘 작성되는 것을 볼 수 있기 때문에<br />
제목에 악성 스크립트를 작성할 수 있을 것 같다.</p>

<p><img src="/images/2024-06-18-XSS2/image-20240618020541625.png" alt="image-20240618020541625" style="zoom:60%;" /></p>

<p><img src="/images/2024-06-18-XSS2/image-20240618020741759.png" alt="image-20240618020741759" style="zoom:80%;" /></p>

<p><img src="/images/2024-06-18-XSS2/image-20240618020757114.png" alt="image-20240618020757114" style="zoom: 50%;" /></p>

<p>스크립트를 작성해보니 잘 삽입되어, 나타나는 것을 확인할 수 있다.</p>]]></content><author><name>ethan</name></author><category term="XSS" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">XSS 이란(1)?</title><link href="http://localhost:4000/xss/XSS1/" rel="alternate" type="text/html" title="XSS 이란(1)?" /><published>2024-06-16T00:00:00+09:00</published><updated>2024-06-16T00:00:00+09:00</updated><id>http://localhost:4000/xss/XSS1</id><content type="html" xml:base="http://localhost:4000/xss/XSS1/"><![CDATA[<p><br /></p>

<h1 id="1-xss1"><span style="background:#000000; color:#ffffff">1. XSS(1)</span></h1>

<p><br /><span style="font-weight:bold; font-size:15px"> ※ 주의 사항 :</span></p>

<p><span style="font-weight:bold; font-size:15px">1. 교육 목적으로만 이용 해주세요.</span><br />
<span style="font-weight:bold; font-size:15px">2. 무단 침입, 데이터 유출, 개인 정보 침해 등 불법적인 활동은 심각한 법적 결과를 초래할 수 있습니다.</span><br />
<span style="font-weight:bold; font-size:15px">3.  개인적인 테스트 환경을 구축해서 실습하시길 바랍니다. </span></p>

<p><br /></p>

<h2 id="11-개념"><span style="background:#696969; color:#ffffff">1.1 개념 </span></h2>

<p><br /></p>

<p><img src="https://cdn.prod.website-files.com/5ff66329429d880392f6cba2/60b35cf8bf38cadc090a95bf_Cross-Site%20Scripting%20Work.png" alt="Cross site scripting (XSS) attack - Types and Examples" style="zoom: 67%;" /></p>

<p>XSS (Cross-Site scripting)은 공격자가 악성 스크립트를 삽입해서 이용자의 브라우저에서 실행되도록 조작하는 기술입니다.</p>

<p>이번 포스팅에서 2 가지 방법에 대해 알아 보겠습니다.<br />
Stored XSS (서버에 저장)<br />
Reflected XSS (서버의 에코 기능 이용)</p>

<p><br /></p>

<h4 id="111-stored-xss"><span style="background:#A9A9A9; color:#ffffff">1.1.1 Stored XSS</span></h4>

<hr />

<p><br /></p>

<p>데이터가 저장되고, 그 데이터가 출력 되는 곳에서 실행할 수 있습니다. <br />
예를 들어 회원 가입, 게시판 글 작성 등 과 같은 곳입니다.</p>

<p>작성 글에  악성 스크립트를 넣어 저장하고 해당 글을 보는 클라이언트를 대상으로 공격합니다.</p>

<p><br /></p>

<p>절차에 대해서 살펴보면</p>

<ol>
  <li>
    <p>작성한 데이터가 화면에 응답되는 지 확인! (저장된 데이터가 제대로 출력 되는 지 확인)</p>
  </li>
  <li>
    <p>특수문자 체크 (어떤 특수 문자를 사용가능한가 확인)</p>
  </li>
  <li>
    <p>javascript이용</p>
  </li>
</ol>

<p><br /></p>

<p><img src="/images/2024-06-16-XSS1/image-20240617183951416.png" alt="image-20240617183951416" style="zoom:67%;" /></p>

<p><img src="/images/2024-06-16-XSS1/image-20240617183813882.png" alt="image-20240617183813882" style="zoom: 67%;" /></p>

<p>burp suite을 통해 저장된 데이터가 페이지에 제대로 출력되는 지 확인 하였다. <br />
그리고 &lt;,’,”,&gt; 와 같은 특수문자를 사용할 수 있는 지 확인 하였다.</p>

<p><br /></p>

<p><img src="/images/2024-06-16-XSS1/image-20240617184034885.png" alt="image-20240617184034885" style="zoom:67%;" /></p>

<p><img src="/images/2024-06-16-XSS1/image-20240617184136042.png" alt="image-20240617184136042" style="zoom:67%;" /></p>

<p>script태그에 alert(1)를 작성하여 데이터를 저장하였다. 이는 페이지를 들어오게 되면 1이라는 경고창이 발생하는 스크립트이다.</p>

<p><img src="/images/2024-06-16-XSS1/캡처_2024_06_17_18_43_08_60.png" alt="캡처_2024_06_17_18_43_08_60" style="zoom:67%;" /></p>

<p>이제 위의 xss-store url에 들어가면 1이라는 경고창이 뜬다. <br />
따라서 공격자가 스크립트를 삽입하게 되면, 해당 url에 들어오는 다수의 클라이언트에게 영향을 끼치게 된다.</p>

<p>참고로, 방금 전에는 데이터를 삽입시에 같은 페이지에서 출력되었지만 출력 화면이 다른 페이지에서도 일어날 수 있다.</p>

<p><br /></p>

<h4 id="112-reflected-xss"><span style="background:#A9A9A9; color:#ffffff">1.1.2 Reflected XSS</span></h4>

<hr />

<p><br /></p>

<p>해당 방법은 서버의 에코 기능을 이용하는 것 입니다.</p>

<p>Stored XSS 와 방법 절차는 같습니다.</p>

<p>하지만  이 방법은 페이지에 직접 악성 코드를 작성하는게 아니라 파라미터에 변화에 따른 공격이기 때문에 <br />
악성 스크립트를 작성하여 링크를 전달하여 공격합니다.</p>

<p>또한, 페이로드가 GET메서드를 이용하여 파라미터가 서버 응답에 그대로 찍혀나오는 지 <br />
확인하기 때문에, 데이터 저장하는 페이지와 출력되는 페이지가 같습니다.</p>

<p>Stored XSS 는 다수의 클라이언트에게 영향을 끼칠 수 있지만 <br />
이는 직접 링크를 받아 클릭한 소수의 클라이언트에게 영향을 끼치는 공격방법입니다.</p>

<p><img src="/images/2024-06-16-XSS1/image-20240617184501016.png" alt="image-20240617184501016" style="zoom:67%;" /></p>

<p><img src="/images/2024-06-16-XSS1/image-20240617184712254.png" alt="image-20240617184712254" style="zoom:67%;" /></p>

<p>파라미터가 페이지에 그대로 출력이 되어, Reflected XSS가 가능하다, 또한 특수문자도 모두 허용된다.</p>

<p><br /></p>

<p><img src="/images/2024-06-16-XSS1/image-20240617184840206.png" alt="image-20240617184840206" style="zoom:67%;" /></p>

<p><img src="/images/2024-06-16-XSS1/image-20240617184859375.png" alt="image-20240617184859375" style="zoom:67%;" /></p>

<p><img src="/images/2024-06-16-XSS1/캡처_2024_06_17_18_49_33_548.png" alt="캡처_2024_06_17_18_49_33_548" style="zoom:67%;" /></p>

<p>해당 url에 들어가면 1이라는 경고문이 뜬다.</p>]]></content><author><name>ethan</name></author><category term="XSS" /><summary type="html"><![CDATA[]]></summary></entry></feed>